#!/bin/bash

# Prioridad por defecto es 1
PRI=1
# Por defecto no se lockea nada
lock=0
# Por defecto no hay informacion de log
verbose=0

function log()
{
  :
  if [ "$verbose" -eq 1 ]; then
    echo "$1"
  fi
}

function help()
{
  log "Usar $0 [params] -c \"comando\""
  log ""
  log "    -l / --lock        Evitar dobles ejecuciones"
  log "    -L / --load        Abortar ejecucion si la sonda supera una determinada carga"
  log "    -t / --timeout     Establecer un timeout. Si se supera se mata el proceso"
  log "    -p / --priority    Establece una prioridad. Va desde 0 (minima prioridad) hasta 2 (maxima prioridad)"
  log "    -r / --ratio       Numero de ejecuciones para que se ejecute una vez"
  log "    -v / --verbose     Informacion extendida"
  log "    -h / --help        Ayuda"
}

function lock()
{
  log "[+] Generando lock de $1"
  fileName=$(basename $1)
  lockDir="/tmp/locks"
  mkdir -p ${lockDir}
  if [ "$?" -ne 0 ]; then
    # Error al generar la carpeta de locks
    return -1
  fi

  if [ -f "${lockDir}/${fileName}" ]; then
    log "[-] Hay un proceso corriendo"
    # Hay un proceso corriendo
    exit 1
  fi
  
  touch "${lockDir}/${fileName}"
  if [ "$?" -eq 0 ]; then
    # Fichero creado con exito
    log "[+] Fichero de lock creado con exito"
    return 0
  else
    # Error al crear el fichero
    log "[-] Error al generar el fichero de lock"
    exit -1
  fi 
}

function unlock()
{
  log "[+] Borrando lock de $1"
  fileName=$(basename $1)
  lockDir="/tmp/locks"

  if [ ! -f "${lockDir}/${fileName}" ]; then
    # El fichero no existe
    return 1
  fi

  rm "${lockDir}/${fileName}"
  if [ "$?" -ne 0 ]; then
    # No se ha podido borrar el fichero
    return -1
  fi

  # Fichero borrado con exito
  return 0
}

function try()
{
  fileName=$(basename $1)
  counterDir="/tmp/counters"

  mkdir -p ${counterDir}
  if [ "$?" -ne 0 ]; then
    # Error al generar la carpeta de contadores
    log "[-] Error al generar la carpeta de contadores"
    exit -1
  fi

  count=$(cat ${counterDir}/${fileName} | awk '($1 ~ /[0-9]+/){print $1}')
  if [ ! -n "$count" ]; then
    log "[-] Actualmente no existe el fichero de contador"

    echo -n "2" > "${counterDir}/${fileName}"
    if [ "$?" -eq 0 ]; then
      # Fichero creado con exito
      log "[+] Fichero de contador creado con exito"
      return 1
    else
      # Error al crear el fichero
      log "[-] Error al generar el fichero de contador"
      exit -1
    fi 
  fi
  log "[+] Fichero de contador leido con exito"
  echo -n "$((count+1))" > "${counterDir}/${fileName}"
  if [ "$?" -eq 0 ]; then
    # Fichero creado con exito
    log "[+] Fichero de contador actualizado con exito"
  else
    # Error al crear el fichero
    log "[-] Error al actualizar el fichero de contador"
    exit -1
  fi 
  return $count

}

function rmTry()
{
  fileName=$(basename $1)
  counterDir="/tmp/counters"
  echo -n "1" > ${counterDir}/${fileName}
  if [ "$?" -ne 0 ]; then
    log "[-] Error al resetear el fichero contador"
    exit -1
  fi
}

if [[ "$#" -lt 1 ]]; then
  verbose=1
  help
  exit 1
fi

while [[ "$#" -gt 0 ]]; do case $1 in
  -L|--load) load="$2"; shift;;
  -l|--lock) lock=1;;
  -v|--verbose) verbose=1;;
  -c|--cmd) cmd="$2"; shift;;
  -p|--priority) PRI="$2"; shift;;
  -t|--timeout) timeout="$2"; shift;;
  -r|--ratio) ratio="$2"; shift;;
  -h|--help) verbose=1; help; exit 1;;
  *) log "[-] Unknown parameter passed: $1"; help; exit 1;;
esac; shift; done

if [ -n "$load" ]; then
  log "[+] Carga maxima establecida en ${load}"
  cargaSonda=$(uptime | gawk -v maxLoad=${load} '{gsub(",",".",$0); if(match($0,/[0-9]{1,4}\.[0-9]{1,4}/,m)) {print m[0]} if (m[0] > maxLoad){exit 1}else{exit 0}}')
  if [ "$?" -eq 1 ]; then
    log "[-] La sonda esta cargada. Abortando.."
    exit 1
  fi
fi

if [ -n "$ratio" ]; then
  contador=$(try $(echo $cmd | awk '{print $1}'))
  n=$?
  if [ "$n" -lt "${ratio}" ]; then
    log "[-] Abortando: Intento $n de $ratio intentos necesarios"
    exit -1
  else
    rmTry $(echo $cmd | awk '{print $1}')
  fi
fi

if [ "$PRI" -eq 0 ]; then
  preCMD="ionice -c3 nice -n19 "
elif [ "$PRI" -eq 1 ]; then
  preCMD=""
elif [ "$PRI" -eq 2 ]; then
  preCMD="nice -n15 "
else
  log "[-] Prioridad no soportada. Abortando.."
  exit 1
fi


if [ -n "$timeout" ]; then
  timeoutCMD="timeout $timeout "
fi

if [ "$lock" -eq 1 ]; then
  lock $(echo $cmd | awk '{print $1}')
  log "[+] Ejecutando: ${preCMD}${timeoutCMD}${cmd}"
  ${preCMD}${timeoutCMD}${cmd}
  unlock $(echo $cmd | awk '{print $1}')
else
  log "[+] Ejecutando: ${preCMD}${timeoutCMD}${cmd}"
  ${preCMD}${timeoutCMD}${cmd}
fi